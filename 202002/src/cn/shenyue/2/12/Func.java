public class Func {
    /**
     * 0. 沈越，你可以的
     * 1. 多态： 一个对象变量可以引用多种不同类型的对象
     * 2. 动态绑定： 运行时才知道该调用哪个方法
     * 3. 静态绑定： static、private、final 方法，不需要解析方法
     * 4. 方法调用解析： 重载 方法签名（函数名，参数列表） 父类
     * 5. 子类覆盖方法返回类型要兼容（父类返回类型的子类型），并且访问修饰符不能低于父类
     * 6. 阻止继承 final类和方法
     * 7. final类的方法自动成为final，而其中的域不会自动成为final
     * 8. 内联： 如果一个方法没有被覆盖并且很短，编译器就能对他进行优化处理，这个过程被称为内联
     * 9. 抽象类： 只用作基类，并不想使用它的实例，抽象方法只需要声明，并且包含一个或多个抽象方法的类必须
     * 被声明为抽象类
     * 10. 抽象类中也可以包含具体数据和具体方法，但一般不推荐抽象类中包含具体方法
     * 11. 抽象类充当着站位的角色，他们的具体实现在子类中
     * 12. 没有抽象方法也可以将一个类声明为抽象类，抽象类不能被实例化
     * 13. 抽象类变量可以引用非抽象子类对象 Person p = new Student("stu", 18);
     * */
    public Func(int k) {
        System.out.println("k :" + k);
    }
}
